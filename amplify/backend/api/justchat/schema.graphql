type User @model {
  id: ID!
  name: String!
  imageUri: String
  status: String
  publicKey: String
  chatRoomUser: [ChatRoomUser] @connection(keyName: "byUser", fields: ["id"])
  fleets: [Fleet] @connection(keyName: "byUser", fields: ["id"])
}

type ChatRoomUser
  @model
  @key(name: "byUser", fields: ["userID", "chatRoomID"])
  @key(name: "byChatRoom", fields: ["chatRoomID", "userID"]) {
  id: ID!
  userID: ID!
  chatRoomID: ID!
  user: User @connection(fields: ["userID"])
  chatRoom: ChatRoom @connection(fields: ["chatRoomID"])
}

type ChatRoom @model {
  id: ID!
  chatRoomUsers: [ChatRoomUser]
    @connection(keyName: "byChatRoom", fields: ["id"])
  messages: [Message] @connection(keyName: "byChatRoom", fields: ["id"])
  lastMessageID: ID!
  lastMessage: Message @connection(fields: ["lastMessageID"])
}

type Message
  @model
  @key(
    name: "byChatRoom"
    fields: ["chatRoomID", "createdAt"]
    queryField: "messagesByChatRoom"
  ) {
  id: ID!
  createdAt: String!
  content: String
  media: String
  userID: ID!
  chatRoomID: ID!
  user: User @connection(fields: ["userID"])
  chatRoom: ChatRoom @connection(fields: ["chatRoomID"])
  likes: [Like] @connection(keyName: "toMessage", fields: ["id"])
}

type Fleet @model @key(name: "byUser", fields: ["userID"]) {
  id: ID!
  type: String!
  text: String
  image: String
  userID: ID!
  user: User @connection(fields: ["userID"])
}

type Like
  @model(queries: null)
  @key(name: "byUser", fields: ["userID", "messageID"])
  @key(name: "toMessage", fields: ["messageID", "userID"]) {
  id: ID!
  userID: ID!
  messageID: ID!
  user: User! @connection(fields: ["userID"])
  message: Message! @connection(fields: ["messageID"])
}
